
### Object-sensitive Java pointer analysis.
### Author: John Whaley

.basedir "pa.joeq"

### Domains

.include "fielddomains.pa"

### Hand-tuned order:
# 44s
#.bddvarorder N0_F0_I0_M1_M0_V1xV0_T0_Z0_Z1_H2_H3_T1_H0_H1

### Find best order:
# 42s
#.bddvarorder N0_F0_I0xM0xM1_V1_V0_Z0xZ1_H2_H3_T0xT1_H0xH1
# 42s
#.bddvarorder N0_F0_I0xM0xM1_V1_V0_Z0xZ1_H2_H3_T0xT1_H1_H0
# 42s
#.bddvarorder N0_F0_I0xM0xM1_V1_V0_Z0xZ1_H2_H3_T0xT1_H0_H1
# 42s
.bddvarorder N0_F0_I0xM1xM0_V1_V0_Z0xZ1_H2_H3_T0_T1_H0_H1

### Relations

vP0 (v:V0, h:H0) input
ovP (vc0:H2, v:V0, h:H0) output
hP (ha:H0, field:F0, hb:H1) output
S (base:V0, field:F0, src:V1) input
L (base:V0, field:F0, dest:V1) input
A (dest:V0, src:V1) input
vT (var:V0, type:T0) input
hT (heap:H0, type:T1) input
aT (type:T0, type:T1) input
vPfilter (v:V0, h:H0)
cha (type:T1, name:N0, method:M0) input
actual (invoke:I0, num:Z0, actualparam:V1) input
formal (method:M0, num:Z0, formalparam:V0) input
Mret (method:M0, v:V1) input
Mthr (method:M0, v:V1) input
Iret (invoke:I0, v:V0) input
Ithr (invoke:I0, v:V0) input
mI (method:M0, invoke:I0, name:N0) input
IE0 (invoke:I0, target:M0) input
IE (invoke:I0, target:M0, ic0:H2, mc0:H3) output

### Rules

# Initial points-to relations.
roots (method:M0) input
mV (method:M0, v:V0) input
reachable(m,c) :- IE(_,m,_,c).
reachable(m,0) :- roots(m).
ovP(c,v,h) :- vP0(v,h), mV(m,v), reachable(m,c).
allmV(v) :- mV(_,v).
ovP(_,v,h) :- vP0(v,h), !allmV(v).

# Type filtering.
vPfilter(v,h) :- vT(v,tv), aT(tv,th), hT(h,th).

# Assignments.
ovP(c,v1,h) :- A(v1,v2), ovP(c,v2,h), vPfilter(v1,h).

# Stores.
hP(h1,f,h2) :- S(v1,f,v2), ovP(c0,v1,h1), ovP(c0,v2,h2).

# Loads.
ovP(c0,v2,h2) :- L(v1,f,v2), ovP(c0,v1,h1), hP(h1,f,h2), \
                 vPfilter(v2,h2).

# Call graph edges.
IE(i,m,a0,b0) :- IE0(i,m), actual(i,0,v0), ovP(a0,v0,b0). split

# Return values and exceptions.
ovP(a0,v,h) :- IE(i,m,a0,b0), Iret(i,v), Mret(m,v1), ovP(b0,v1,h), \
               vPfilter(v,h). split
#ovP(a0,v,h) :- IE(i,m,a0,b0), Ithr(i,v), Mthr(m,v1), ovP(b0,v1,h), \
#               vPfilter(v,h). split

# Parameters.
ovP(b0,v,h) :- formal(m,z,v), IE(i,m,a0,b0), \
               actual(i,z,v1), ovP(a0,v1,h), vPfilter(v,h). split
