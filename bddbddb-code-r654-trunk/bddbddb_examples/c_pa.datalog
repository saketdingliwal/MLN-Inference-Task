
### C pointer analysis
### Author: Dzintars Avots

.basedir "c_pa.enscript"

# 19s
#.bddvarorder V0xV1xV2_FD0xFD1xFD2_FD3xFD4_C0xC1xC2

# Found by findbestorder
# 4s
.bddvarorder C0xC1xC2_V0xV1_V2xV3_FD0xFD1xFD2xFD3xFD4

.include "fielddomains"
.include "consrelations"

hasPointsTo_usingV0(o:V0,p:FD)
hasPointsTo_usingV0(o,p) :- pointsTo(o,p,_,_).

ptrOrIntIncr(o_dst:V0 , p_dst:FD0 , o_src:V1 , p_src:FD1, size:FD3)
ptrOrIntDecr(o_dst:V0 , p_dst:FD0 , o_src:V1 , p_src:FD1, size:FD3)

#mergeLoc(o:V1, p:FD1)
#mergeLoc(o_s,p_s) :- assign(o_d,p_d,o_s,p_s).
#mergeLoc(o_ptr,p_ptr) :- stores(o_ptr,p_ptr,o_src,p_src,p_store).
#mergeLoc(o_ptr,p_ptr) :- loads(o_dst,p_dst,o_ptr,p_ptr,p_load).
#mergeLoc(o_ptr,1) :- copySrc(o_cpy,o_ptr,1).
#mergeLoc(o_ptr,1) :- copyDst(o_cpy,o_ptr,1).
#mergeLoc(o_src,p_src) :- fieldAddress(o_dst,p_dst,o_src,p_src,p_sub).
#mergeLoc(o_src,p_src) :- ptrOrIntIncr(o_dst,p_dst,o_src,p_src,size).
#mergeLoc(o_src,p_src) :- unhandledBinaryOp(o_dst,p_dst,o_src,p_src).
#mergeLoc(o_src,p_src) :- unhandledAddOp(o_dst,p_dst,o_src,p_src).
#mergeLoc(fp,1) :- callTargets(fp).

# TBD: avoid unreachable procedures

# TBD: merge same addr fields

mergePointsTo(o,p1,o_h,p_h) :- pointsTo(o,p1,o_h,p_h).
#TBD: coincident array fields
#mergePointsTo(o,p1,o_h,p_h) :- pointsTo(o,p2,o_h,p_h), coincArrayFieldVals(p1,p2).
#mergePointsTo(o,p1,o_h,p_h) :- pointsTo(o,p2,o_h,p_h), coincArrayFieldVals(p2,p1).
#TBD: this is actually slightly incorrect, since it should also exclude fields which are coincident with fields in the
#remainingFields sets

mergePointsTo(o,p1,o_h,p_h) :- pointsTo(o,p2,o_h,p_h), !remainingFields(p1,p2), !remainingFields(p2,p1), canonicalPath(p1,_). pri=-10
#mergePointsTo_for_assign (v2:V1 , v2fd:FD1 , v3:V2 , v3fd:FD2)
#mergePointsTo_for_assign(o,p1,o_h,p_h) :- assign(_,_,o,p1), pointsTo(o,p2,o_h,p_h), !remainingFields(p1,p2), !remainingFields(p2,p1). 
#mergePointsTo(o,p1,o_h,p_h) :- mergeLoc(o,p1), pointsTo(o,p2,_,_), !remainingFields(p1,p2), !remainingFields(p2,p1), pointsTo(o,p2,o_h,p_h). split
#mergePointsTo1(o:V1,p1:FD0,p2:FD1,o_h:V2,p_h:FD2)
#mergePointsTo1(o,p1,p2,o_h,p_h) :- mergeLoc(o,p1), pointsTo(o,p2,_,_), !remainingFields(p1,p2), !remainingFields(p2,p1). split
#mergePointsTo(o,p1,o_h,p_h) :- mergePointsTo1(o,p1,p2,o_h,p_h), pointsTo(o,p2,o_h,p_h). split
#mergePointsTo2(o:V1,p1:FD1,p2:FD,o_h:V2,p_h:FD)
#mergePointsTo1(o,p1,p2,o_h,p_h) :- mergeLoc(o,p1), pointsTo(o,p2,o_h,p_h).
#mergePointsTo2(o,p1,p2,o_h,p_h) :- mergePointsTo1(o,p1,p2,o_h,p_h), !remainingFields(p1,p2).
#mergePointsTo(o,p1,o_h,p_h) :- mergePointsTo2(o,p1,p2,o_h,p_h), !remainingFields(p2,p1).

#Remember: remainingFields is strict (so rem(a,a) is false, unless in array)
#TBD: is there any usage of remainingFields that needs to include rem(a,a) in general?

#TBD: fix: remainingFields expects legal paths, and has been used with canonical paths in some relations
# any other problems like this?  type check everything
# also check arrayPaths and subPath
# also check cbdd_solver for this problem

#TBD: think about remainingFields inside arrays... does this capture the correct result?
#... this needs to be inspected for all rules involving remainingFields
#rF(a[].a1,a[].a2) :- rF(a[5].a1,a[5].a2) 
#rF(a[].a2,a[].a1) :- rF(a[5].a2,a[6].a1)
CONS_subPath(i,j,k) :- subPath(i,j,k).
distinctSubPath(i,j,k) :- remainingFields(prev_j,j), subPath(i,prev_j,k).
fieldsFollowingPath(p,p_follows) :- canonicalPath(p_follows,p).
fieldsFollowingPath(p,p_follows) :- canonicalPath(p_l,p), remainingFields(p_l,p_follows).
subPathCombines(i:FD,j:FD)
subPathCombines(i,j) :- subPath(i,j,_).
CONS_subPath(i,j,k) :- !subPathCombines(i,j), fieldsFollowingPath(i,k), canonicalPath(j,_), !distinctSubPath(i,j,k).
CONS_subPath(i,j,k) :- !subPathCombines(i,j), canonicalPath(k,i), canonicalPath(j,_), !distinctSubPath(i,j,k).

###############

pointsTo(o_d,p_d,o_h,p_h) :- pointsToAbstract(o_d,p_d,o_h,p_h).

pointsTo(o_d,p_d,o_h,p_h) :- assign(o_d,p_d,o_s,p_s), mergePointsTo(o_s,p_s,o_h,p_h). pri=-1
#pointsTo(o_d,p_d,o_h,p_h) :- assign(o_d,p_d,o_s,p_s), mergePointsTo(o_s,p_s,o_h,p_h).
#mergePointsTo(o,p1,o_h,p_h) :- pointsTo(o,p2,o_h,p_h), !remainingFields(p1,p2), !remainingFields(p2,p1).

assign(o_dst,p_dst2,o_src,p_src) :- stores(o_ptr,p_ptr,o_src,p_src,p_store), mergePointsTo(o_ptr,p_ptr,o_dst,p_dst1), CONS_subPath(p_dst1,p_store,p_dst2). split

assign(o_dst,p_dst,o_src,p_src2) :- loads(o_dst,p_dst,o_ptr,p_ptr,p_load), mergePointsTo(o_ptr,p_ptr,o_src,p_src1), CONS_subPath(p_src1,p_load,p_src2). split

#TBD: should we create destination edges using pointsTo(o_cpy,p_sub) or mergePointsTo(o_cpy,p_sub) ?
#TBD: assigns (whether generated here or elsewhere) should minimize cross-type merging whenever possible
#TBD: should destination edges be using CONS_subpath for the *writing* part of the destination edge, or should 
#something different be done to determine merging for the *reading* part of the destination edge?
# (for instance, union {A,B} holds A and B typed values, and doesn't need to cross-merge the non-distinct fields)
assign(o_cpy,p_sub,o_src,p_src2) :- copySrc(o_cpy,o_ptr,1), mergePointsTo(o_ptr,1,o_src,p_src1), subPath(p_src1,p_sub,p_src2). split
assign(o_dst,p_dst2,o_cpy,p_sub) :- copyDst(o_cpy,o_ptr,1), mergePointsTo(o_ptr,1,o_dst,p_dst1), hasPointsTo_usingV0(o_cpy,p_sub), CONS_subPath(p_dst1,p_sub,p_dst2). split

#TBD: imprecisely located reads and writes, due to stores,loads or memcopies, cause the object to be accessed as
# multiple types.  Under OPT, this does not happen, so determiniation of locations with multiple types is correct.
# under CONS, we need to have a better query for objects with multiple types.

#Optimistically, we have:
#preciseAssign: (obj x, path p1, type t) = (obj y, path p2, type t)
#preciseCastAssign: (obj x, path p1, type t) = (cast to type t) (obj y, path p2, type t2)
#
#Conservatively, we have:
#consAssign(x,p1,t,y,p2,t) :- preciseAssign(x,p1,t,y,p2,t)
#consAssign(x,p1,t,y,p2,t2) :- preciseAssign(x,p1,t,y,p2,t)
#
#consAssign(x,p1,t,y,p3,t3) :- preciseAssign(x,p1,t,y,p2,t), disjoint(p1,p2,p3) or something
#
#castAssign(x,p1,t1,y,p2,t2)
#copiedFromY(py,ty) :- !remainingFields((p2,t2),(py,ty)), !remainingFields((py,ty),(p2,t2))
#writtenToX(px,tx) :- !remainingFields((p1,t1),(px,tx)), !remainingFields((px,tx),(p1,t1))
#(what about remainingField effects of a union inside an array?)
#corresponds(p1,p2,px,py) :- subPath(p1',p',p1), subPath(p2',p',p2), subPath(p1',p,px), subPath(p2',p,py)
#(actually, that should be using canonicalPath in addition to subPath)
#(and we don't need the px,py's that definitely come before p1,p2)
#(or the ones that definitely come afterward)
#
#(some sort of precise variation of this should be in OPT, also, to make
#every assignment like a memcopy)
#consAssign(px,py) :- writtenToX(px), copiedFromY(py), corresponds(px,py)
#
#Note: since we'd like to keep the destination precise, we don't do:
##consAssign(x,p1,t2,y,p2,t) :- preciseAssign(x,p1,t,y,p2,t)

pointsTo(o_dst,p_dst,o_h,p_h2_c) :- fieldAddress(o_dst,p_dst,o_src,p_src,p_sub), mergePointsTo(o_src,p_src,o_h,p_h1), CONS_subPath(p_h1,p_sub,p_h2_l), canonicalPath(p_h2_l,p_h2_c). split

pointsTo(o_dst,p_dst,o_h,p_h2) :- ptrOrIntIncr(o_dst,p_dst,o_src,p_src,size), mergePointsTo(o_src,p_src,o_h,p_h1), arrayPaths(p_h1,size,p_h2). split

pointsTo(o_dst,p_dst,o_h,p_h2) :- ptrOrIntIncr(o_dst,p_dst,o_src,p_src,size), mergePointsTo(o_src,p_src,o_h,p_h2), arrayPaths(_,size,p_h2). split

pointsTo(o_dst,p_dst,o_h,p_h2) :- ptrOrIntDecr(o_dst,p_dst,o_src,p_src,size), mergePointsTo(o_src,p_src,o_h,p_h1), arrayPaths(p_h2,size,p_h1). split

pointsTo(o_dst,p_dst,o_h,p_h2) :- ptrOrIntDecr(o_dst,p_dst,o_src,p_src,size), mergePointsTo(o_src,p_src,o_h,p_h2), arrayPaths(_,size,p_h2). split

#TBD: what if intIncr/Decr cannot be converted to a ptrIncr/Decr?
ptrOrIntIncr(o_dst,p_dst,o_src,p_src,size) :- ptrIncr(o_dst,p_dst,o_src,p_src,size).
ptrOrIntDecr(o_dst,p_dst,o_src,p_src,size) :- ptrDecr(o_dst,p_dst,o_src,p_src,size).
ptrOrIntIncr(o_dst,p_dst,o_src,p_src,size1) :- intIncr(o_dst,p_dst,o_src,p_src,size2), sizeMult(size1,size2).
ptrOrIntDecr(o_dst,p_dst,o_src,p_src,size1) :- intDecr(o_dst,p_dst,o_src,p_src,size2), sizeMult(size1,size2).

remainingPaths(p_prev:FD2, p_next:FD4)
remainingPaths(p_prev_c,p_next_c) :- remainingFields(p_prev_l,p_next_l), canonicalPath(p_prev_l,p_prev_c), canonicalPath(p_next_l,p_next_c).

initialArrayPath(p_elem_0:FD, size:FD)
initialArrayPath(p, size) :- arrayPaths(p,size,_).
remainderArrayPath(p_remainder:FD, size:FD)
remainderArrayPath(p, size) :- arrayPaths(_,size,p).

#includes upperbound and bad non-upperbound increments:
#TBD: shouldn't all increments potentially go past upper bound, unless we precisely know it is a single increment
# and the base address was the first elem?
badPtrIncrBase(o_dst:V0 , p_dst:FD0 , o_src:V1 , p_src:FD1, size:FD3)
badPtrIncrBase(o_dst,p_dst,o_h,p_h,size) :- ptrIncr(o_dst,p_dst,o_src,p_src,size), mergePointsTo(o_src,p_src,o_h,p_h), !initialArrayPath(p_h,size). split
pointsTo(o_dst,p_dst,o_h,p_h2) :- badPtrIncrBase(o_dst,p_dst,o_h,p_h1,_), remainingPaths(p_h1,p_h2). split

#includes lowerbound and bad non-lowerbound decrements:
#TBD: shouldn't all decrements be considered to go past lowerbound, unless we precisely know it is a single decr?
badPtrDecrBase(o_dst:V0 , p_dst:FD0 , o_src:V1 , p_src:FD1, size:FD3)
badPtrDecrBase(o_dst,p_dst,o_h,p_h,size) :- ptrDecr(o_dst,p_dst,o_src,p_src,size), mergePointsTo(o_src,p_src,o_h,p_h), !remainderArrayPath(p_h,size). split
pointsTo(o_dst,p_dst,o_h,p_h2) :- badPtrDecrBase(o_dst,p_dst,o_h,p_h1,_), remainingPaths(p_h2,p_h1). split

#TBD: handle bad intIncrs and intDecrs

pointsTo(o_dst,p_dst,o_h,p_h) :- unhandledBinaryOp(o_dst,p_dst,o_src,p_src), mergePointsTo(o_src,p_src,o_h,p_h).
pointsTo(o_dst,p_dst,o_h,p_h2) :- unhandledBinaryOp(o_dst,p_dst,o_src,p_src), mergePointsTo(o_src,p_src,o_h,p_h1), remainingPaths(p_h1,p_h2). split
pointsTo(o_dst,p_dst,o_h,p_h2) :- unhandledBinaryOp(o_dst,p_dst,o_src,p_src), mergePointsTo(o_src,p_src,o_h,p_h1), remainingPaths(p_h2,p_h1). split

pointsTo(o_dst,p_dst,o_h,p_h) :- unhandledAddOp(o_dst,p_dst,o_src,p_src), mergePointsTo(o_src,p_src,o_h,p_h).
pointsTo(o_dst,p_dst,o_h,p_h2) :- unhandledAddOp(o_dst,p_dst,o_src,p_src), mergePointsTo(o_src,p_src,o_h,p_h1), remainingPaths(p_h1,p_h2). split
pointsTo(o_dst,p_dst,o_h,p_h2) :- unhandledAddOp(o_dst,p_dst,o_src,p_src), mergePointsTo(o_src,p_src,o_h,p_h1), remainingPaths(p_h2,p_h1). split

#TBD: unhandledUnaryOp ?

###############

usedPointers(o,p) :- modPtrs(_,o,p,_).
usedPointers(o,p) :- refPtrs(_,o,p,_).
usedPointers(o,p) :- fieldAddress(_,_,o,p,_).
usedPointers(o,p) :- copySrc(_,o,p).
usedPointers(o,p) :- copyDst(_,o,p).
usedPointers(o,p) :- ptrIncr(_,_,o,p,_).
usedPointers(o,p) :- ptrDecr(_,_,o,p,_).

potentialPointers(o:V1 , p:FD1)
potentialPointers(o,p) :- intIncr(_,_,o,p,_).
potentialPointers(o,p) :- intDecr(_,_,o,p,_).
potentialPointers(o,p) :- unhandledBinaryOp(_,_,o,p).
potentialPointers(o,p) :- unhandledAddOp(_,_,o,p).
potentialPointers(o,p) :- assign(_,_,o,p).

###################################################################

callsProc(fp,proc) :- callTargets(fp), mergePointsTo(fp, 1, proc, 0).

callsiteTargets(fp,proc) :- callsProc(fp,proc).

calledFromEntry(proc) :- entryProc(proc).
calledFromEntry(proc2) :- calledFromEntry(proc1), procCallsites(proc1,fp), callsProc(fp,proc2). 

###### Actuals to Formals ######
assign(o_dst,p_dst,o_src,p_src) :- formalParam(proc,n,o_dst,p_dst), p_dst = p_src, callsProc(fp,proc), actualArg(fp,n,o_src). split

###### Actuals to Varargs ######
pointsTo(o_vaptr,1,o_arg,0) :- varArgsPtr(proc,o_vaptr), not_hasParam(proc,n), callsProc(fp,proc), actualArg(fp,n,o_arg). split

###### Return to Destination ######
assign(o_dst,p_dst,o_src,p_src) :- callDestination(fp,o_dst,p_dst), p_dst = p_src, callsProc(fp,proc), returnVal(proc,o_src). split

###### Add To ProcArgs:
# callsProc(V2,V3) & actualArg(V2,-,V2_arg,-) :- procedureArgLocs(V3,V2_arg).

###### Add To Proc Callees:
# callsProc(V2,V3) & callerProc(V2,V1_proc) & definedOrModeledProc(V3) :- procCallees(C1,V1_proc,C2,V3).
# callsProc(V2,V3) & callerProc(V2,V1_proc) & !definedOrModeledProc(V3) :- undefinedProcCallees(C1,V1_proc,C2,V3).

###### Add unhandled proc return assign:
# callsProc(V2,V3) & !definedOrModeledProc(V3) & callDestination(V2,V1_dest,-) \
# :- unhandledReturnsBDD(V3,V1_dest).

#addLoadedToMods(V1_proc,V2a,V2FDa,FD) & !var_is_local(V2a,V1_proc) & replace(V2a,V3) & replace(V2FDa,V3FD)
#-> reflocs(V1_proc,V3,V3FD)

#addLoadedToMods(V1_proc,V2,V2FD,FD)
#-> modptrs(V1_proc,V2,V2FD,FD)

.include "modelrules2"

#.include "consrulesdebug"
