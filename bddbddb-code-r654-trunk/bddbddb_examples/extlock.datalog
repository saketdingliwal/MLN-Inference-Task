### Context-sensitive external lock finder.
#
# Author: Chris Unkel
#

.basedir "pa.joeq"

### Domains

.include "fielddomains.pa"

.bddvarorder N0_F0_I0_M1_M0_V1xV0_VC1xVC0_T0_Z0_T1_H0_H1
.bddnodes 10000000
.bddcache 1000000

### Relations

cvP (vc:VC0, v:V0, h:H0) input
cA (vcdest:VC0, dest:V0, vcsrc:VC1, source:V1)
vT (var:V0, type:T0) input
hT (heap:H0, type:T1) input
aT (type:T0, type:T1) input
formal (method:M0, num:Z0, formalparam:V0) input
IEcs (ccaller:VC1, invoke:I0, ccallee:VC0, target:M0) input

### Rules

#roots (method:M0) input
#mI0 (method:M0, invoke:I0)
#IEnum (invoke:I0, target:M0, ccaller:VC1, ccallee:VC0) output
#mI0(m,i) :- mI(m,i,_).
#IEnum(i,m,vc2,vc1) :- roots(m), mI0(m,i), IE0(i,m). number

mI (method:M0, invoke:I0, name:N0) input
mC (method:M0, context:VC0) input
sync (v:V0) input

mSync (method:M0)
mSync(m) :- formal(m,0,v), sync(v).

locked (method:M0, context:VC0, heap:H0)
lockedType (method:M0, context:VC, type:T1) output
lockedType0 (method:M0, context:VC, type:T1)
unlockedType (method:M0, context:VC, type:T1)
#sometimesUnlocked (method:M0, heap:H0)
sometimesUnlockedType (method:M0, type:T1)
#alwaysLocked (method:M0, heap:H0) output outputtuples
alwaysLockedType (method:M0, type:T0) output outputtuples
externalLockType (method:M0, type:T0) output outputtuples

#lockedTypeAnyContext (method:M0, type:T0) output outputtuples

locked(m,c,h) :- mSync(m), formal(m, 0, v), cvP(c, v, h).
lockedType0(m,c,t) :- locked(m,c,h), hT(h,t).
lockedType(m,c,t) :- lockedType0(m,c,t).
#locked(calleem, calleec, h) :- mI(callerm, invoke, _), \
#                               IEcs(callerc, invoke, calleec, calleem), \
#                               locked(callerm, callerc, h). split
lockedType(calleem,calleec,t) :- mI(callerm, invoke, _), \
                                 IEcs(callerc, invoke, calleec, calleem), \
                                 lockedType(callerm,callerc,t). split

unlockedType(m,c,t) :- !lockedType(m,c,t).
unlockedType(calleem,calleec,t) :- mI(callerm, invoke, _), \
                                   IEcs(callerc, invoke, calleec, calleem), \
                                   !lockedType0(calleem,calleec,t), \
                                   unlockedType(callerm,callerc,t). split

#lockedTypeAnyContext(m,t) :- lockedType(m,_,t).
#sometimesUnlocked(m,h) :- !locked(m,c,h), mC(m,c).
sometimesUnlockedType(m,t) :- unlockedType(m,c,t), mC(m,c).
#alwaysLocked(m,h) :- !sometimesUnlocked(m,h), mC(m,_).
alwaysLockedType(m,t) :- !sometimesUnlockedType(m,t), mC(m,_).
externalLockType(m,t) :- alwaysLockedType(m,t), \
                         formal(m,0,v), \
                         vT(v,this), \
                         !aT(this,t).
