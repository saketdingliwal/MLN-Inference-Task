
.basedir "pa.joeq"
.include "fielddomains.pa"
.bddvarorder N0_F0_I0_M1_M0_V1xV0_T0_Z0_T1_H0_H1_TV0xTV1

TV 262144
C 262144

### Input relations

# Statements.
assignStatement (dest:V, src:V) input
loadStatement (dest:V, base:V, field:F) input
storeStatement (base:V, field:F, src:V) input
returnStatement (method:M, src:V) input
invokeMethod (invoke:I, method:M) input
invokeParameter (invoke:I, param:Z, src:V) input
invokeReturn (invoke:I, dest:V) input
newStatement (dest:V, type:TV) input
castStatement (dest:V, type:TV, src:V) input

# Points-to information
pointsTo (context:C, var:V, object:H) input
objectType (object:H, type:TV) input

# Map between context and base object.
context2baseobject (context:C, location:V, object:H) input

# Class hierarchy information.
override (supermethod:M, submethod:M) input

# Map between code locations and type variables.
location2typevar (location:V, typevar:TV) input

# Type variables in the source code.
methodParameter (method:M, param:Z, type:TV) input
field (field:F, type:TV) input
returnValue (method:M, type:TV) input

# Some type variables correspond to concrete types.
concreteTypes (typevar:TV, concretetype:T) input

### Computed relations

# Encodes subtyping constraints between type variables.
#    To encode equality between types x and y, include both
#    (x,y) and (y,x) in the subType relation.
subType (superT:TV, subT:TV)

# Type variables that correspond to multiple types.
multiType (typevar:TV) outputtuples

# Type variables that correspond to a single type.
singleType (typevar:TV) outputtuples

### Rules for adding subtype constraints.

# Transitive closure.
#subType(a,c) :- subType(a,b), subType(b,c).

# Parameters of overridden methods are contravariant.
subType(t2,t1) :- override(m1,m2), \
                  methodParameter(m1,z,t1), methodParameter(m2,z,t2).

# Return values of overridden methods are covariant.
subType(t1,t2) :- override(m1,m2), \
                  returnValue(m1,t1), returnValue(m2,t2).

# Constraints from assignments.
subType(t1,t2) :- assignStatement(v1,v2), location2typevar(v1,t1), \
                  location2typevar(v2,t2).

# Constraints from return statements.
subType(t1,t2) :- returnValue(m,t1), returnStatement(m,v2), \
                  location2typevar(v2,t2).

# Constraints from load statements.
subType(t1,t2) :- loadStatement(v2,v1,f), field(f,t2), \
                  location2typevar(v2,t1).

# Constraints from store statements.
subType(t1,t2) :- storeStatement(v1,f,v2), field(f,t1), \
                  location2typevar(v2,t2).

# Constraints from invocation parameters.
subType(t1,t2) :- methodParameter(m,z,t1), invokeMethod(i,m), invokeParameter(i,z,v2), \
                  location2typevar(v2,t2).

# Constraints from invocation return values.
subType(t1,t2) :- returnValue(m,t2), invokeMethod(i,m), invokeReturn(i,v1), \
                  location2typevar(v1,t1).

# Constraints from new statements.
subType(t1,t2) :- newStatement(v1,t2), location2typevar(v1,t1).

# Constraints from cast statements.  Assumes casts always succeed!
subType(t1,t2) :- castStatement(v1,t2,v3), location2typevar(v1,t1).
#subType(t1,t3) :- castStatement(v1,t2,v3), location2typevar(v1,t1), location2typevar(v3,t3).

# Constraints from constant statements.


### Rules for computing the set of concrete types for each type variable.

# Transitive closure over the subType relation.
concreteTypes(t1,t) :- subType(t1,t2), concreteTypes(t2,t).

multiType(t) :- concreteTypes(t,ta), concreteTypes(t,tb), ta != tb.

singleType(t) :- !multiType(t), concreteTypes(t,_).

#######
# Stuff about generics
#
# Primitive types cannot be type parameters.
# Parameterized types cannot inherit from java.lang.Throwable.
