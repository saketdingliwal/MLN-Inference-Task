
### Java context-insensitive inclusion-based pointer analysis
### This version includes ordering constraints on the relations.
### Author: John Whaley

.basedir "pa.joeq"

### Domains

.include "fielddomains.pa"

#.bddvarorder N0_F0_I0_M1_M0_V1xV0_T0_Z0_T1_H0_H1
.bddvarorder M1_I0_N0_F0_M0_V1xV0_H1_Z0_T0_T1_H0
### Relations

vP0 (v:V0, h:H0) input v<h
vP (v:V0, h:H0) output v<h
A (dest:V0, source:V1) input dest=source
hP0 (ha:H0, field:F0, hb:H1) input field<ha ha<hb field<hb
hP (ha:H0, field:F0, hb:H1) output  field<ha ha<hb field<hb
S (base:V0, field:F0, src:V1) input base=src field<base field<src
L (base:V0, field:F0, dest:V1) input base=dest field<base field<dest
vT (var:V0, type:T0) input var<type
hT (heap:H0, type:T1) input type<heap
aT (type1:T0, type2:T1) input type1<type2
vPfilter (v:V0, h:H0) v<h
cha (type:T1, name:N0, method:M0) input name<method name<type method<type
actual (invoke:I0, num:Z0, actualparam:V1) input invoke<num actualparam<num invoke<actualparam
formal (method:M0, num:Z0, formalparam:V0) input method<num formalparam<num method<formalparam
Mret (method:M0, v:V1) input method<v
Mthr (method:M0, v:V1) input method<v
Iret (invoke:I0, v:V0) input invoke<v
Ithr (invoke:I0, v:V0) input invoke<v
mI (method:M0, invoke:I0, name:N0) input invoke<method name<method name<invoke
IE0 (invoke:I0, target:M0) input invoke<target
IE (invoke:I0, target:M0) output invoke<target

### Rules

vP(v,h) :- vP0(v,h).
IE(i,m) :- IE0(i,m).
vPfilter(v,h) :- vT(v,tv), aT(tv,th), hT(h,th).
vP(v1,h) :- A(v1,v2), vP(v2,h), vPfilter(v1,h).
hP(h1,f,h2) :- S(v1,f,v2), vP(v1,h1), vP(v2,h2).
vP(v2,h2) :- L(v1,f,v2), vP(v1,h1), hP(h1,f,h2), vPfilter(v2,h2). split
A(v1,v2) :- formal(m,z,v1), IE(i,m), actual(i,z,v2).
A(v2,v1) :- Mret(m,v1), IE(i,m), Iret(i,v2).
A(v2,v1) :- Mthr(m,v1), IE(i,m), Ithr(i,v2).
