### Hybrid context-sensitive external lock finder.
#
# Uses a mixture of context-sensitive and insensitive analysis.
#
# Author: Chris Unkel
#

.basedir "pa.joeq"

### Domains

.include "fielddomains.pa"

#.bddvarorder N0_F0_I0_V1xV0_M1xM0xVC1xVC0_T0_Z0_T1_H0_H1
#.bddvarorder N0_F0_I0_M1_M0_V1xV0_VC1xVC0_T0_Z0_T1_H0_H1
#.bddvarorder N0_F0_I0_V1xV0_M1_M0_VC1xVC0_T0_Z0_T1_H0_H1
#.bddvarorder N0_F0_I0_V1xV0_VC1xVC0_M1_M0_T0_Z0_T1_H0_H1
.bddvarorder N0_F0_I0_V1xV0_M0_VC1xVC0_M1_T0_Z0_T1_H0_H1

### Relations

cvP (vc:VC0, v:V0, h:H0) input
cA (vcdest:VC0, dest:V0, vcsrc:VC1, source:V1) input
vT (var:V0, type:T0) input
hT (heap:H0, type:T1) input
aT (type:T0, type:T1) input
formal (method:M0, num:Z0, formalparam:V0) input
IEcs (ccaller:VC1, invoke:I0, ccallee:VC0, target:M0) input

### Rules

roots (method:M0) input
#mI0 (method:M0, invoke:I0)
#IEnum (invoke:I0, target:M0, ccaller:VC1, ccallee:VC0) output
#mI0(m,i) :- mI(m,i,_).
#IEnum(i,m,vc2,vc1) :- roots(m), mI0(m,i), IE0(i,m). number

mI (method:M0, invoke:I0, name:N0) input
mC (method:M0, context:VC0) input

mSync (method:M0)

sync (v:V0) input
mSync (method:M0)
mSync(m) :- formal(m,0,v), sync(v).

# context-insensitive analysis
locksCi (method:M0, h:H0)
unlockedCi (method:M0, h:H0)
callsCi (callee:M0, caller:M1)
alwaysLockedCi (method:M0, h:H0)
externalLockCi (method:M0, h:H0) output outputtuples

locksCi(m,h) :- mSync(m), formal(m,0,v), cvP(_,v,h).
unlockedCi(m,_) :- roots(m).
callsCi(caller,callee) :- IEcs(_,invoke,_,callee), mI(caller,invoke,_).
unlockedCi(callee,h) :- unlockedCi(caller,h), callsCi(caller,callee), !locksCi(callee,h).
alwaysLockedCi(m,h) :- !unlockedCi(m,h), mC(m,_).
externalLockCi(m,h) :- alwaysLockedCi(m,h), hT(h,t), formal(m,0,v), vT(v,this), !aT(this,t).

care(method:M0,heap:H0)
care(m,h) :- externalLockCi(m,h).
care(caller,h) :- care(callee,h), callsCi(caller,callee).

# context-sensitive
locked0 (method:M0, context:VC0, heap:H0)
locked (method:M0, context:VC, heap:H0) output
unlocked (method:M0, context:VC, heap:H0)
sometimesUnlocked (method:M0, heap:H0)
alwaysLocked (method:M0, heap:H0) output outputtuples
alwaysLocked (method:M0, heap:H0)
externalLock (method:M0, heap:H0) output outputtuples

#lockedTypeAnyContext (method:M0, type:T0) output outputtuples

locked0(m,c,h) :- mSync(m), formal(m, 0, v), cvP(c, v, h).
locked(m,c,h) :- locked0(m,c,h).
locked(calleem,calleec,h) :- mI(callerm, invoke, _), \
                             IEcs(callerc, invoke, calleec, calleem), \
                             care(calleem,h), \
                             locked(callerm,callerc,h). split
                             
unlocked(m,c,h) :- !locked(m,c,h), care(m,h).
unlocked(calleem,calleec,h) :- mI(callerm, invoke, _), \
                               IEcs(callerc, invoke, calleec, calleem), \
                               care(calleem,h), \
                               !locked0(calleem,calleec,h), \
                               unlocked(callerm,callerc,h). split

sometimesUnlocked(m,h) :- unlocked(m,c,h), mC(m,c).
alwaysLocked(m,h) :- !sometimesUnlocked(m,h), mC(m,_), \
                     care(m,h).
externalLock(m,h) :- alwaysLocked(m,h), \
                     hT(h,t), \
                     formal(m,0,v), \
                     vT(v,this), \
                     !aT(this,t).


