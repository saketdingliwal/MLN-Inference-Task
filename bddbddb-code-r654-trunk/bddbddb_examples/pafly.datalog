
### Java context-insensitive inclusion-based pointer analysis
### Author: John Whaley

.basedir "pa.hello"

### Domains

.include "fielddomains.pa"

.bddvarorder N0_F0_I0_M1_M0_V1xV0_T0_Z0_T1_H0_H1

### Relations

vP0 (v:V0, h:H0) input
vP (v:V0, h:H0) output
A (dest:V0, source:V1) input output
hP0 (ha:H0, field:F0, hb:H1) input
hP (ha:H0, field:F0, hb:H1) output
S (base:V0, field:F0, src:V1) input
L (base:V0, field:F0, dest:V1) input
vT (var:V0, type:T0) input
hT (heap:H0, type:T1) input output
aT (type:T0, type:T1) input output
vPfilter (v:V0, h:H0)
cha (type:T1, name:N0, method:M0) input output
actual (invoke:I0, num:Z0, actualparam:V1) input output
formal (method:M0, num:Z0, formalparam:V0) input
Mret (method:M0, v:V1) input
Mthr (method:M0, v:V1) input
Iret (invoke:I0, v:V0) input output
Ithr (invoke:I0, v:V0) input
mI (method:M0, invoke:I0, name:N0) input
IE0 (invoke:I0, target:M0) input
IE (invoke:I0, target:M0) output

### Rules

vP(v,h) :- vP0(v,h).
IE(i,m) :- IE0(i,m).
vPfilter(v,h) :- vT(v,tv), aT(tv,th), hT(h,th).
vP(v1,h) :- A(v1,v2), vP(v2,h), vPfilter(v1,h). pri=10
hP(h1,f,h2) :- S(v1,f,v2), vP(v1,h1), vP(v2,h2). pri=10
vP(v2,h2) :- L(v1,f,v2), vP(v1,h1), hP(h1,f,h2), vPfilter(v2,h2). split pri=10
A(v1,v2) :- formal(m,z,v1), IE(i,m), actual(i,z,v2).
A(v2,v1) :- Mret(m,v1), IE(i,m), Iret(i,v2).
A(v2,v1) :- Mthr(m,v1), IE(i,m), Ithr(i,v2).
IE(i,m2) :- mI(m,i,n), actual(i,0,v), vP(v,h), hT(h,t), cha(t,n,m2). split pri=5

reachable (method:M0) output { \
    PAFly.addToReachable(reachable); \
}
roots (method:M0) input
stringToType (heap:H0,type:T0) input output
stringToField (heap:H0,field:F0) input output
stringToMethod (heap:H0,method:M0) input output
defaultConstructor (type:T0, method:M0) input output
allConstructors (type:T0, method:M0) input output

reachable(m) :- roots(m). modifies (vP0,A,L,S,actual,formal,Mret,Mthr,Iret,Ithr,IE0,vT,hT,aT,mI,cha,roots,stringToType,stringToField,stringToMethod,reachable,defaultConstructor,allConstructors)
reachable(m) :- IE(_,m). modifies (vP0,A,L,S,actual,formal,Mret,Mthr,Iret,Ithr,IE0,vT,hT,aT,mI,cha,roots,stringToType,stringToField,stringToMethod,reachable,defaultConstructor,allConstructors)

forName (method:M0)
forName("java.lang.Class.forName (Ljava/lang/String;)Ljava/lang/Class;").
forName("java.lang.Class.forName (Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;").
getClass (method:M0)
getClass("java.lang.Object.getClass ()Ljava/lang/Class;").
newInstance (method:M0)
newInstance("java.lang.Class.newInstance ()Ljava/lang/Object;").
newInstance2 (method:M0)
newInstance2("java.lang.reflect.Constructor.newInstance ([Ljava/lang/Object;)Ljava/lang/Object;").
getConstructor (method:M0)
getConstructor("java.lang.Class.getConstructor ([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;").
getConstructor("java.lang.Class.getDeclaredConstructor ([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;").
getConstructors (method:M0)
getConstructors("java.lang.Class.getConstructors ()[Ljava/lang/reflect/Constructor;").
getConstructors("java.lang.Class.getDeclaredConstructors ()[Ljava/lang/reflect/Constructor;").
getField (m:M0)
getField("java.lang.Class.getField (Ljava/lang/String;)Ljava/lang/reflect/Field;").
getField("java.lang.Class.getDeclaredField (Ljava/lang/String;)Ljava/lang/reflect/Field;").
getMethod (m:M0)
getMethod("java.lang.Class.getMethod (Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;").
getMethod("java.lang.Class.getDeclaredMethod (Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;").

sb_init (m:M0)
sb_init("java.lang.StringBuffer.<init> (Ljava/lang/String;)V").
sb_append (m:M0)
sb_append("java.lang.StringBuffer.append (Ljava/lang/String;)Ljava/lang/StringBuffer;").
sb_append("java.lang.StringBuffer.append (Ljava/lang/StringBuffer;)Ljava/lang/StringBuffer;").
sb_append("java.lang.StringBuffer.append (Ljava/lang/Object;)Ljava/lang/StringBuffer;").
sb_toString (m:M0)
sb_toString("java.lang.StringBuffer.toString ()Ljava/lang/String;").

sb2_append (m:M0)
sb2_append("MyMockLib.MyStringBuffer.append (Ljava/lang/StringBuffer;Ljava/lang/String;)Ljava/lang/StringBuffer;").
sb2_append("MyMockLib.MyStringBuffer.append (Ljava/lang/StringBuffer;Ljava/lang/StringBuffer;)Ljava/lang/StringBuffer;").
sb2_append("MyMockLib.MyStringBuffer.append (Ljava/lang/StringBuffer;Ljava/lang/Object;)Ljava/lang/StringBuffer;").
sb2_toString (m:M0)
sb2_toString("MyMockLib.MyStringBuffer.toString (Ljava/lang/StringBuffer;)Ljava/lang/String;").

invoke (m:M0)
invoke("java.lang.reflect.Method.invoke (Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;").

skipMethod (m:M0) printsize
skipMethod(m) :- forName(m).
skipMethod(m) :- getClass(m).
skipMethod(m) :- getConstructor(m).
skipMethod(m) :- getConstructors(m).
skipMethod(m) :- getField(m).
skipMethod(m) :- getMethod(m).
skipMethod(m) :- newInstance(m).
skipMethod(m) :- newInstance2(m).
skipMethod(m) :- sb_append(m).
skipMethod(m) :- sb_toString(m).
skipMethod(m) :- sb2_append(m).
skipMethod(m) :- sb2_toString(m).
skipMethod(m) :- invoke(m).

mapIH (i:I0, h:H0) output

returnNewObject (i:I0) outputtuples { \
    PAFly.addToHDomain(returnNewObject); \
}

vP(v,h) :- returnNewObject(i), Iret(i,v), mapIH(i,h).

returnNewObject(i) :- IE(i,m), forName(m). modifies mapIH
hT(h,t) :- IE(i,m), forName(m), Iret(i,v), mapIH(i,h), vT(v,t).
returnNewObject(i) :- IE(i,m), getClass(m). modifies mapIH
hT(h,t) :- IE(i,m), getClass(m), Iret(i,v), mapIH(i,h), vT(v,t).
returnNewObject(i) :- IE(i,m), getConstructor(m). modifies mapIH
hT(h,t) :- IE(i,m), getConstructor(m), Iret(i,v), mapIH(i,h), vT(v,t).
returnNewObject(i) :- IE(i,m), getConstructors(m). modifies mapIH
hT(h,t) :- IE(i,m), getConstructors(m), Iret(i,v), mapIH(i,h), vT(v,t).
returnNewObject(i) :- IE(i,m), getField(m). modifies mapIH
hT(h,t) :- IE(i,m), getField(m), Iret(i,v), mapIH(i,h), vT(v,t).
returnNewObject(i) :- IE(i,m), getMethod(m). modifies mapIH
hT(h,t) :- IE(i,m), getMethod(m), Iret(i,v), mapIH(i,h), vT(v,t).
returnNewObject(i) :- IE(i,m), newInstance(m). modifies mapIH
returnNewObject(i) :- IE(i,m), newInstance2(m). modifies mapIH

classObjectType (heap:H0, type:T0) outputtuples { \
    PAFly.addToClassObjectType(classObjectType); \
}
classObjectType(hc,t) :- forName(m), IE(i,m), mapIH(i,hc), actual(i,1,v), vP(v,h), stringToType(h,t).
classObjectType(hc,t) :- getClass(m), IE(i,m), mapIH(i,hc), actual(i,0,v), vP(v,h), hT(h,t).

resolvedNewInstance (i:I0, t:T0) outputtuples
resolvedNewInstance(i,t) :- newInstance(m), IE(i,m), actual(i,0,vc), vP(vc,hc), classObjectType(hc,t).
hT(h,t) :- resolvedNewInstance(i,t), mapIH(i,h).
IE(i,m) :- resolvedNewInstance(i,t), defaultConstructor(t,m).
vP(v,h) :- resolvedNewInstance(i,t), mapIH(i,h), defaultConstructor(t,m), formal(m,0,v).

usedInNewInstance (i:I0, i:I1) outputtuples
usedInNewInstance(i,i2) :- newInstance(m), IE(i,m), actual(i,0,vc), vP(vc,hc), mapIH(i2,hc).

usedInGetConstructor (i:I0, i:I1) outputtuples
usedInGetConstructor(i,i2) :- getConstructor(m), IE(i,m), actual(i,0,vc), vP(vc,hc), mapIH(i2,hc).

constructorObjectType (h:H0, t:T0) outputtuples
constructorObjectType(h,t) :- getConstructor(cm), IE(i,cm), mapIH(i,h), actual(i,0,v), vP(v,hc), classObjectType(hc,t).

resolvedNewInstance2 (i:I0, t:T0) outputtuples
resolvedNewInstance2(i,t) :- newInstance2(m), IE(i,m), actual(i,0,vc), vP(vc,hc), constructorObjectType(hc,t).
hT(h,t) :- resolvedNewInstance2(i,t), mapIH(i,h).
IE(i,m) :- resolvedNewInstance2(i,t), allConstructors(t,m).
vP(v,h) :- resolvedNewInstance2(i,t), mapIH(i,h), allConstructors(t,m), formal(m,0,v).

constructorObjectType(h,t) :- getConstructors(cm), IE(i,cm), mapIH(i,h), actual(i,0,v), vP(v,hc), classObjectType(hc,t).
hP(h,f,h2) :- constructorObjectType(h,_), f = "null", h = h2.

usedInNewInstance(i,i2) :- newInstance2(m), IE(i,m), actual(i,0,vc), vP(vc,hc), mapIH(i3,hc), usedInGetConstructor(i3,i2).

fieldObject (h:H0, f:F0) outputtuples
fieldObject(h,f) :- getField(cm), IE(i,cm), mapIH(i,h), actual(i,1,v), vP(v,hc), stringToField(hc,f). split
S(v1,f,v2) :- IE(i,"java.lang.reflect.Field.set (Ljava/lang/Object;Ljava/lang/Object;)V"), actual(i,0,v), vP(v,h), fieldObject(h,f), \
              actual(i,1,v1), actual(i,2,v2).
L(v1,f,v2) :- IE(i,"java.lang.reflect.Field.get (Ljava/lang/Object;)Ljava/lang/Object;"), actual(i,0,v), vP(v,h), fieldObject(h,f), \
              actual(i,1,v1), Iret(i,v2).

methodObject (h:H0, m:M0) outputtuples
methodObject(h,m) :- getMethod(cm), IE(i,cm), mapIH(i,h), actual(i,1,v), vP(v,hc), stringToMethod(hc,m).

resolvedInvoke (i:I0, m:M0) outputtuples
resolvedInvoke(i,m) :- IE(i,m2), invoke(m2), actual(i,0,v), vP(v,h), methodObject(h,m). split
# Param #0
A(v1,v2) :- resolvedInvoke(i,m), formal(m,0,v1), actual(i,1,v2).
# Other params
vP(v,h) :- resolvedInvoke(i,m), formal(m,z,v), z > 0, actual(i,2,v2), vP(v2,h2), hP(h2,"null",h). split
# Return values
A(v1,v2) :- resolvedInvoke(i,m), Iret(i,v1), Mret(m,v2).

leadsToForName (v:V0,i:I0) output
leadsToForName(v,i) :- IE(i,m), forName(m), actual(i,1,v).
leadsToForName(v2,i) :- leadsToForName(v1,i), A(v1,v2).
leadsToForName(v2,i) :- leadsToForName(v1,i), Iret(i2,v1), IE(i2,m), sb_append(m), actual(i2,0,v2).
leadsToForName(v2,i) :- leadsToForName(v1,i), Iret(i2,v1), IE(i2,m), sb_append(m), actual(i2,1,v2).
leadsToForName(v2,i) :- leadsToForName(v1,i), actual(i2,0,v1), IE(i2,m), sb_append(m), actual(i2,1,v2).
leadsToForName(v2,i) :- leadsToForName(v1,i), Iret(i2,v1), IE(i2,m), sb_toString(m), actual(i2,0,v2).
leadsToForName(v2,i) :- leadsToForName(v1,i), actual(i2,0,v1), IE(i2,m), sb_init(m), actual(i2,1,v2).

leadsToForName(v2,i) :- leadsToForName(v1,i), Iret(i2,v1), IE(i2,m), sb2_append(m), actual(i2,1,v2).
leadsToForName(v2,i) :- leadsToForName(v1,i), Iret(i2,v1), IE(i2,m), sb2_append(m), actual(i2,2,v2).
leadsToForName(v2,i) :- leadsToForName(v1,i), actual(i2,1,v1), IE(i2,m), sb2_append(m), actual(i2,2,v2).
leadsToForName(v2,i) :- leadsToForName(v1,i), Iret(i2,v1), IE(i2,m), sb2_toString(m), actual(i2,1,v2).

leadsToForName(v2,i) :- leadsToForName(v1,i), L(v3,f,v1), vP(v3,h3), vP(v4,h3), S(v4,f,v2). split

lhs (v:V0)
lhs(v) :- A(v,_).
lhs(v) :- Iret(i2,v), IE(i2,m), sb_append(m).
lhs(v) :- actual(i2,0,v), IE(i2,m), sb_append(m).
lhs(v) :- Iret(i2,v), IE(i2,m), sb_toString(m).
lhs(v) :- actual(i2,0,v), IE(i2,m), sb_init(m).

lhs(v) :- Iret(i2,v), IE(i2,m), sb2_append(m).
lhs(v) :- actual(i2,1,v), IE(i2,m), sb2_append(m).
lhs(v) :- Iret(i2,v), IE(i2,m), sb2_toString(m).

lhs(v) :- L(v3,f,v), vP(v3,h3), vP(v4,h3), S(v4,f,_). split

typeString (v:V0)
typeString(v) :- vP(v,h), stringToType(h,_).

constForName (i:I0,t:T0) outputtuples
constForName(i,t) :- classObjectType(h,t), mapIH(i,h), IE(i,m), forName(m).

constNewInstance (i:I0,t:T0) outputtuples
constNewInstance(i,t) :- resolvedNewInstance(i,t).
constNewInstance(i,t) :- resolvedNewInstance2(i,t).

castNewInstance (i:I0,t:T0) outputtuples
castNewInstance(i,t1) :- newInstance(m), IE(i,m), Iret(i,v2), A(v1,v2), vT(v1,t1), vT(v2,t2), t1!=t2.
castNewInstance(i,t1) :- newInstance2(m), IE(i,m), Iret(i,v2), A(v1,v2), vT(v1,t1), vT(v2,t2), t1!=t2.

deadEndForName (v:V0,i:I0) outputtuples
deadEndForName(v,i) :- leadsToForName(v,i), !lhs(v), !typeString(v).
