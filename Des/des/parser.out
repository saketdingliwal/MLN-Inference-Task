Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> formula
Rule 1     formula -> body IMPLIES head
Rule 2     formula -> head
Rule 3     body -> term
Rule 4     body -> term COMMA body
Rule 5     head -> term
Rule 6     term -> NOT term
Rule 7     term -> PRED LPAREN args RPAREN
Rule 8     args -> arg_seq
Rule 9     arg_seq -> arg
Rule 10    arg_seq -> arg COMMA arg_seq
Rule 11    arg -> VAR
Rule 12    arg -> NUMBER

Terminals, with rules where they appear

COMMA                : 4 10
IMPLIES              : 1
LPAREN               : 7
NOT                  : 6
NUMBER               : 12
PRED                 : 7
RPAREN               : 7
VAR                  : 11
error                : 

Nonterminals, with rules where they appear

arg                  : 9 10
arg_seq              : 8 10
args                 : 7
body                 : 1 4
formula              : 0
head                 : 1 2
term                 : 3 4 5 6

Parsing method: LALR

state 0

    (0) S' -> . formula
    (1) formula -> . body IMPLIES head
    (2) formula -> . head
    (3) body -> . term
    (4) body -> . term COMMA body
    (5) head -> . term
    (6) term -> . NOT term
    (7) term -> . PRED LPAREN args RPAREN

    NOT             shift and go to state 5
    PRED            shift and go to state 3

    body                           shift and go to state 1
    formula                        shift and go to state 6
    head                           shift and go to state 2
    term                           shift and go to state 4

state 1

    (1) formula -> body . IMPLIES head

    IMPLIES         shift and go to state 7


state 2

    (2) formula -> head .

    $end            reduce using rule 2 (formula -> head .)


state 3

    (7) term -> PRED . LPAREN args RPAREN

    LPAREN          shift and go to state 8


state 4

    (3) body -> term .
    (4) body -> term . COMMA body
    (5) head -> term .

    IMPLIES         reduce using rule 3 (body -> term .)
    COMMA           shift and go to state 9
    $end            reduce using rule 5 (head -> term .)


state 5

    (6) term -> NOT . term
    (6) term -> . NOT term
    (7) term -> . PRED LPAREN args RPAREN

    NOT             shift and go to state 5
    PRED            shift and go to state 3

    term                           shift and go to state 10

state 6

    (0) S' -> formula .



state 7

    (1) formula -> body IMPLIES . head
    (5) head -> . term
    (6) term -> . NOT term
    (7) term -> . PRED LPAREN args RPAREN

    NOT             shift and go to state 5
    PRED            shift and go to state 3

    head                           shift and go to state 11
    term                           shift and go to state 12

state 8

    (7) term -> PRED LPAREN . args RPAREN
    (8) args -> . arg_seq
    (9) arg_seq -> . arg
    (10) arg_seq -> . arg COMMA arg_seq
    (11) arg -> . VAR
    (12) arg -> . NUMBER

    VAR             shift and go to state 17
    NUMBER          shift and go to state 14

    args                           shift and go to state 13
    arg                            shift and go to state 16
    arg_seq                        shift and go to state 15

state 9

    (4) body -> term COMMA . body
    (3) body -> . term
    (4) body -> . term COMMA body
    (6) term -> . NOT term
    (7) term -> . PRED LPAREN args RPAREN

    NOT             shift and go to state 5
    PRED            shift and go to state 3

    body                           shift and go to state 18
    term                           shift and go to state 19

state 10

    (6) term -> NOT term .

    COMMA           reduce using rule 6 (term -> NOT term .)
    IMPLIES         reduce using rule 6 (term -> NOT term .)
    $end            reduce using rule 6 (term -> NOT term .)


state 11

    (1) formula -> body IMPLIES head .

    $end            reduce using rule 1 (formula -> body IMPLIES head .)


state 12

    (5) head -> term .

    $end            reduce using rule 5 (head -> term .)


state 13

    (7) term -> PRED LPAREN args . RPAREN

    RPAREN          shift and go to state 20


state 14

    (12) arg -> NUMBER .

    COMMA           reduce using rule 12 (arg -> NUMBER .)
    RPAREN          reduce using rule 12 (arg -> NUMBER .)


state 15

    (8) args -> arg_seq .

    RPAREN          reduce using rule 8 (args -> arg_seq .)


state 16

    (9) arg_seq -> arg .
    (10) arg_seq -> arg . COMMA arg_seq

    RPAREN          reduce using rule 9 (arg_seq -> arg .)
    COMMA           shift and go to state 21


state 17

    (11) arg -> VAR .

    COMMA           reduce using rule 11 (arg -> VAR .)
    RPAREN          reduce using rule 11 (arg -> VAR .)


state 18

    (4) body -> term COMMA body .

    IMPLIES         reduce using rule 4 (body -> term COMMA body .)


state 19

    (3) body -> term .
    (4) body -> term . COMMA body

    IMPLIES         reduce using rule 3 (body -> term .)
    COMMA           shift and go to state 9


state 20

    (7) term -> PRED LPAREN args RPAREN .

    COMMA           reduce using rule 7 (term -> PRED LPAREN args RPAREN .)
    IMPLIES         reduce using rule 7 (term -> PRED LPAREN args RPAREN .)
    $end            reduce using rule 7 (term -> PRED LPAREN args RPAREN .)


state 21

    (10) arg_seq -> arg COMMA . arg_seq
    (9) arg_seq -> . arg
    (10) arg_seq -> . arg COMMA arg_seq
    (11) arg -> . VAR
    (12) arg -> . NUMBER

    VAR             shift and go to state 17
    NUMBER          shift and go to state 14

    arg_seq                        shift and go to state 22
    arg                            shift and go to state 16

state 22

    (10) arg_seq -> arg COMMA arg_seq .

    RPAREN          reduce using rule 10 (arg_seq -> arg COMMA arg_seq .)

